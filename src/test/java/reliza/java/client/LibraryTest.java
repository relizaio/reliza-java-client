/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reliza.java.client;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Test;

import reliza.java.client.responses.FullRelease;
import reliza.java.client.responses.ProjectVersion;
import reliza.java.client.responses.ReleaseData;

/**
 * Class for testing Library.java methods.
 */
public class LibraryTest {
	private final String BASE_URL = "https://test.relizahub.com";
	private final String TEST_PROJECT_UUID = "24625ac0-0256-4638-99d2-f245cc56ff8f";
	private final String TEST_PROJECT_API_ID = "PROJECT__24625ac0-0256-4638-99d2-f245cc56ff8f";
	private final String TEST_PROJECT_API_KEY = "8191d4466885f82ead853ee3286cae592f8ce7374535bf707e67a7f7aaaaf8d0e0b1fc9945aacfe16cdac1712e519772";
	private final String TEST_ORG_API_ID = "ORGANIZATION_RW__6dbea5c5-6b01-4df6-94dd-4ddc8a09dee1__ord__b41f1b17-db44-43c8-848f-065f092b8690";
	private final String TEST_ORG_API_KEY= "a7721111aca9e7599a4565463533ab70eb56be7d00fc83bf938cb6c992f398a7e9b6d9a3e494f28a6529d238d7def8d1";
	private final String TEST_INSTANCE_API_ID = "INSTANCE__a7088288-f1d0-4435-8f18-5e6b07c092ed";
	private final String TEST_INSTANCE_API_KEY = "7cee068b814d9bc591f252194971cd829ccbf6a17bf5505a65068f7817f0edcfc41dc9473afc071d968a538832e0c43c";
	private final String TEST_APPROVAL_API_ID = "APPROVAL__75a68085-c46f-49aa-b549-39de03db6a43";
	private final String TEST_APPROVAL_API_KEY = "5d1c520fcdd6be248aee0357ea8b551873a1d761e7da19a75ea825797de0e63c8e6b98b9ac41906c3e6a09ca01bf8e4f";
	
	/**
	 * Test for getVersion using org wide api key and id
	 */
	@Test public void testGetVersion() {
		Flags flags = Flags.builder().apiKeyId(TEST_ORG_API_ID)
			.apiKey(TEST_ORG_API_KEY)
			.branch("master")
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		ProjectVersion projectVersion = library.getVersion();
		Assert.assertNotNull(projectVersion);
	}
	
	/**
	 * Test for setting a new release and pushing project details.
	 */
	@Test public void testAddRelease() {
		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
			.apiKey(TEST_PROJECT_API_KEY)
			.branch("master")
			.commitHash("b92b48da3779e3807862cf38d56f789e411af577")
			.artCiMeta(Arrays.asList("Github Actions", "Github Actions"))
			.artGroup(Arrays.asList("io.reliza", "io.reliza"))
			.artId(Arrays.asList("relizaio/reliza-cli", "relizaio/reliza-cli"))
			.artPackage(Arrays.asList("DOCKER", "DOCKER"))
			.artPublisher(Arrays.asList("Rasa", "Rasa"))
			.artType(Arrays.asList("Docker", "Docker"))
			.dateActual("2021-01-11T19:43:32.286086002Z")
			.dateEnd(Arrays.asList("2021-01-12T19:43:32.286086002Z", "2021-01-12T19:43:32.286086002Z"))
			.dateStart(Arrays.asList("2021-01-11T19:43:32.286086002Z", "2021-01-11T19:43:32.286086002Z"))
			.artDigests(Arrays.asList("sha256:123", "sha256:125"))
			.endPoint("https://github.com/relizaio/reliza-java-client")
			.status("complete")
			.tagKeys(Arrays.asList("prod", "prod"))
			.tagVals(Arrays.asList("true", "true"))
			.vcsType("git")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		ProjectVersion projectVersion = library.getVersion();
		Assert.assertNotNull(projectVersion);
		library.flags.setVersion(projectVersion.getVersion());
		ReleaseData releaseData = library.addRelease();
		Assert.assertNotNull(releaseData);
	}
	
	/**
	 * Test for checkHash method.
	 */
//	@Test public void testCheckHash() {
//		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
//			.apiKey(TEST_PROJECT_API_KEY)
//			.hash("sha256:123")
//			.baseUrl(BASE_URL)
//			.build();
//		Library library = new Library(flags);
//		ReleaseData releaseData = library.checkHash();
//		Assert.assertNotNull(releaseData);
//	}
	
	/**
	 * Test for instData method with an image sha256.
	 */
	@Test public void testInstDataImagesString() {
		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
			.apiKey(TEST_INSTANCE_API_KEY)
			.imagesString("sha256:tests")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		Map<String, String> status = library.instData();
		Assert.assertNotNull(status);
	}
	
	/**
	 * Test for instData method using file path.
	 */
	@Test public void testInstDataImageStream() {
		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
			.apiKey(TEST_INSTANCE_API_KEY)
			.imageInputStream(IOUtils.toInputStream("this is my input stream", StandardCharsets.UTF_8))
			.namespace("spacename")
			.senderId("Idsender")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		Map<String, String> status = library.instData();
		Assert.assertNotNull(status);
	}
	
	/**
	 * Test for getMyRelease method.
	 */
//	@Test public void testGetMyRelease() {
//		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
//			.apiKey(TEST_INSTANCE_API_KEY)
//			.baseUrl(BASE_URL)
//			.build();
//		Library library = new Library(flags);
//		List<FullRelease> fullReleases = library.getMyRelease();
//		Assert.assertFalse(fullReleases.isEmpty());
//	}
//	
	/**
	 * Test for getLatestRelease method.
	 */
	@Test public void testGetLatestRelease() {
		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
			.apiKey(TEST_PROJECT_API_KEY)
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.branch("master")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		FullRelease fullRelease = library.getLatestRelease();
		Assert.assertNotNull(fullRelease);
	}
	
	/**
	 * Test for approveRelease method.
	 */
	@Test public void testApproveRelease() {
		Flags approveReleaseFlags = Flags.builder().apiKeyId(TEST_APPROVAL_API_ID)
			.apiKey(TEST_APPROVAL_API_KEY)
			.version("0.0.0")
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.approvalType("PM")
			.baseUrl(BASE_URL)
			.build();
		Library approveReleaseLibrary = new Library(approveReleaseFlags);
		ReleaseData releaseData = approveReleaseLibrary.approveRelease();
		Assert.assertNotNull(releaseData);
	}
}