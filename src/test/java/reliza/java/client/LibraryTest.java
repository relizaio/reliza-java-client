/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reliza.java.client;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Test;

import reliza.java.client.responses.FullRelease;
import reliza.java.client.responses.ProjectVersion;
import reliza.java.client.responses.ReleaseData;

/**
 * Class for testing Library.java methods.
 */
public class LibraryTest {
	private final String BASE_URL = "https://test.relizahub.com";
	private final String TEST_PROJECT_UUID = "e84763be-38a3-429b-9e4d-5c75a77e02c7";
	private final String TEST_PROJECT_API_ID = "PROJECT__e84763be-38a3-429b-9e4d-5c75a77e02c7";
	private final String TEST_PROJECT_API_KEY = "d7fa82031731148a15e8c0fae3a169c901794aaa13b09e240af2dac9853762237e64f77910ac2e23ac672b13ba5279c4";
	private final String TEST_ORG_API_ID = "ORGANIZATION_RW__be10a566-1713-4459-b5c4-c80a3ace1de4__ord__00ee5893-0966-45bc-b31b-1d3f3b6d3e3b";
	private final String TEST_ORG_API_KEY= "8c8f8fb0fb679ee38fc9299b23c083c79fdd1061a0a94ab6f7c3921fc19d6aec41c053bc2b3d68ed8898dc970e89e419";
	private final String TEST_INSTANCE_API_ID = "INSTANCE__eff315f3-0ff3-4c6a-a002-0884acc7a73d";
	private final String TEST_INSTANCE_API_KEY = "b07e26e16d77f4ed58b934765543318bc6c210beb8292ffd1c8741e8c2b2c31a139c64e5ae0697110856774f5732030c";
	private final String TEST_APPROVAL_API_ID = "APPROVAL__651c41a8-97c6-40f3-82e7-492609b124d6";
	private final String TEST_APPROVAL_API_KEY = "a2a45b65aa665d8d79d539b6d481daa9fa6362d53e52143edba88fb5a4524a2af06783b7ec3c233f53804910248f1664";
	
	/**
	 * Test for getVersion using org wide api key and id
	 */
	@Test public void testGetVersion() {
		Flags flags = Flags.builder().apiKeyId(TEST_ORG_API_ID)
			.apiKey(TEST_ORG_API_KEY)
			.branch("master")
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		ProjectVersion projectVersion = library.getVersion();
		Assert.assertNotNull(projectVersion);
	}
	
	/**
	 * Test for setting a new release and pushing project details.
	 */
	@Test public void testAddRelease() {
		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
			.apiKey(TEST_PROJECT_API_KEY)
			.branch("master")
			.commitHash("b92b48da3779e3807862cf38d56f789e411af577")
			.artCiMeta(Arrays.asList("Github Actions", "Github Actions"))
			.artGroup(Arrays.asList("io.reliza", "io.reliza"))
			.artId(Arrays.asList("relizaio/reliza-cli", "relizaio/reliza-cli"))
			.artPackage(Arrays.asList("DOCKER", "DOCKER"))
			.artPublisher(Arrays.asList("Rasa", "Rasa"))
			.artType(Arrays.asList("Docker", "Docker"))
			.dateActual("2021-01-11T19:43:32.286086002Z")
			.dateEnd(Arrays.asList("2021-01-12T19:43:32.286086002Z", "2021-01-12T19:43:32.286086002Z"))
			.dateStart(Arrays.asList("2021-01-11T19:43:32.286086002Z", "2021-01-11T19:43:32.286086002Z"))
			.artDigests(Arrays.asList("sha256:123", "sha256:125"))
			.endPoint("https://github.com/relizaio/reliza-java-client")
			.status("complete")
			.tagKeys(Arrays.asList("prod", "prod"))
			.tagVals(Arrays.asList("true", "true"))
			.vcsType("git")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		ProjectVersion projectVersion = library.getVersion();
		Assert.assertNotNull(projectVersion);
		library.flags.setVersion(projectVersion.getVersion());
		ReleaseData releaseData = library.addRelease();
		Assert.assertNotNull(releaseData);
	}
	
	/**
	 * Test for checkHash method.
	 */
	@Test public void testCheckHash() {
		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
			.apiKey(TEST_PROJECT_API_KEY)
			.hash("sha256:52")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		ReleaseData releaseData = library.checkHash();
		Assert.assertNotNull(releaseData);
	}
	
	/**
	 * Test for instData method with an image sha256.
	 */
	@Test public void testInstDataImagesString() {
		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
			.apiKey(TEST_INSTANCE_API_KEY)
			.imagesString("sha256:tests")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		Map<String, String> status = library.instData();
		Assert.assertNotNull(status);
	}
	
	/**
	 * Test for instData method using file path.
	 */
	@Test public void testInstDataImageStream() {
		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
			.apiKey(TEST_INSTANCE_API_KEY)
			.imageInputStream(IOUtils.toInputStream("this is my input stream", StandardCharsets.UTF_8))
			.namespace("spacename")
			.senderId("Idsender")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		Map<String, String> status = library.instData();
		Assert.assertNotNull(status);
	}
	
	/**
	 * Test for getMyRelease method.
	 */
	@Test public void testGetMyRelease() {
		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
			.apiKey(TEST_INSTANCE_API_KEY)
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		List<FullRelease> fullReleases = library.getMyRelease();
		Assert.assertFalse(fullReleases.isEmpty());
	}
	
	/**
	 * Test for getLatestRelease method.
	 */
	@Test public void testGetLatestRelease() {
		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
			.apiKey(TEST_PROJECT_API_KEY)
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.branch("master")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		FullRelease fullRelease = library.getLatestRelease();
		Assert.assertNotNull(fullRelease);
	}
	
	/**
	 * Test for approveRelease method.
	 */
	@Test public void testApproveRelease() {
		Flags approveReleaseFlags = Flags.builder().apiKeyId(TEST_APPROVAL_API_ID)
			.apiKey(TEST_APPROVAL_API_KEY)
			.version("0.0.1")
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.approvalType("PM")
			.baseUrl(BASE_URL)
			.build();
		Library approveReleaseLibrary = new Library(approveReleaseFlags);
		ReleaseData releaseData = approveReleaseLibrary.approveRelease();
		Assert.assertNotNull(releaseData);
	}
}