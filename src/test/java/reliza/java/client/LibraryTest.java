/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reliza.java.client;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Test;

import reliza.java.client.responses.InstanceMetadata;
import reliza.java.client.responses.ProjectMetadata;
import reliza.java.client.responses.ProjectVersion;
import reliza.java.client.responses.ReleaseMetadata;

/**
 * Class for testing Library.java methods.
 */
public class LibraryTest {
    private final String TEST_PROJECT_UUID = "eece2d2c-18ea-450a-aa1b-fd165ea19cea";
    private final String TEST_PROJECT_API_ID = "PROJECT__eece2d2c-18ea-450a-aa1b-fd165ea19cea";
    private final String TEST_PROJECT_API_KEY = "40cbd45321c6d19bf39a9ff4e7b865d290109c33d6c69d723bf23ec9d298cf8a22f3873138b66b686433c7d6f5a2f0ad";
    private final String TEST_ORG_API_ID = "ORGANIZATION_RW__d57d3dc5-f559-49d7-b1f8-b093bf1eb8de";
    private final String TEST_ORG_API_KEY= "1dbccfa478a0e4f146e2a214b6be1463121ebf8db4cd15cbe907a89547ce2805c595e6400e891d975e8b2398c6d2c643";
    private final String TEST_INSTANCE_API_ID = "INSTANCE__4b4a8f4e-5143-494d-b65f-cd3815876d9f";
    private final String TEST_INSTANCE_API_KEY = "7c02de5c14e0f968be52070ce640bc9b7aa22f36f5178992f9b8cbae5c34d366b46d105e1237482351700d426ad2d0d3";
    private final String TEST_APPROVAL_API_ID = "APPROVAL__c08c8069-d003-4f35-84a2-bf191a3d02e0";
    private final String TEST_APPROVAL_API_KEY = "14a1b10322883fea910910b7da4c4024a50c6bccbb159c4aa33a92576fc9d47f61d2bedb34cc469af9db5f88ec665307";
    
    /**
     * Test for getVersion using org wide api key and id
     */
    @Test public void testGetVersion() {
          Flags getVersionFlags = Flags.builder().apiKeyId(TEST_ORG_API_ID)
              .apiKey(TEST_ORG_API_KEY)
              .branch("master")
              .projectId(UUID.fromString(TEST_PROJECT_UUID))
              .baseUrl("https://test.relizahub.com")
              .build();
        Library library = new Library(getVersionFlags);
        ProjectVersion projectVersion = library.getVersion();
        Assert.assertNotNull(projectVersion);
    }
    
    /**
     * Test for setting a new release and pushing project details.
     */
    @Test public void testAddRelease() {
        Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
            .apiKey(TEST_PROJECT_API_KEY)
            .branch("master")
            .commitHash("b92b48da3779e3807862cf38d56f789e411af577")
            .artCiMeta(Arrays.asList("Github Actions", "Github Actions"))
            .artGroup(Arrays.asList("io.reliza", "io.reliza"))
            .artId(Arrays.asList("relizaio/reliza-cli", "relizaio/reliza-cli"))
            .artPackage(Arrays.asList("DOCKER", "DOCKER"))
            .artPublisher(Arrays.asList("Rasa", "Rasa"))
            .artType(Arrays.asList("Docker", "Docker"))
            .dateActual("2021-01-11T19:43:32.286086002Z")
            .dateEnd(Arrays.asList("2021-01-12T19:43:32.286086002Z", "2021-01-12T19:43:32.286086002Z"))
            .dateStart(Arrays.asList("2021-01-11T19:43:32.286086002Z", "2021-01-11T19:43:32.286086002Z"))
            .endPoint("https://github.com/relizaio/reliza-java-client")
            .status("completed")
            .tagKeys(Arrays.asList("prod", "prod"))
            .tagVals(Arrays.asList("true", "true"))
            .vcsType("git")
            .baseUrl("https://test.relizahub.com")
            .build();
        Library library = new Library(flags);
        ProjectVersion projectVersion = library.getVersion();
        Assert.assertNotNull(projectVersion);
        library.flags.setVersion(projectVersion.getVersion());
        ProjectMetadata projectMetadata = library.addRelease();
        Assert.assertNotNull(projectMetadata);
    }
    
    /**
     * Test for checkHash method.
     */
    @Test public void testCheckHash() {
        Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
            .apiKey(TEST_PROJECT_API_KEY)
            .hash("sha256:2")
            .baseUrl("https://test.relizahub.com")
            .build();
        Library library = new Library(flags);
        ProjectMetadata projectMetadata = library.checkHash();
        Assert.assertNotNull(projectMetadata);
    }
    
    /**
     * Test for instData method with an image sha256.
     */
    @Test public void testInstDataImagesString() {
      Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
          .apiKey(TEST_INSTANCE_API_KEY)
          .imagesString("sha256:poke")
          .baseUrl("https://test.relizahub.com")
          .build();
      Library library = new Library(flags);
      InstanceMetadata instanceMetadata = library.instData();
      Assert.assertNotNull(instanceMetadata);
    }
    
    /**
     * Test for instData method using file path.
     */
    @Test public void testInstDataImageStream() {
      Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
          .apiKey(TEST_INSTANCE_API_KEY)
          .imageInputStream(IOUtils.toInputStream("this is my input stream", StandardCharsets.UTF_8))
          .namespace("spacename")
          .senderId("Idsender")
          .baseUrl("https://test.relizahub.com")
          .build();
      Library library = new Library(flags);
      InstanceMetadata instanceMetadata = library.instData();
      Assert.assertNotNull(instanceMetadata);
    }
    
    /**
     * Test for getMyRelease method.
     */
    @Test public void testGetMyRelease() {
      Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
          .apiKey(TEST_INSTANCE_API_KEY)
          .baseUrl("https://test.relizahub.com")
          .build();
      Library library = new Library(flags);
      List<ReleaseMetadata> releaseMetadata = library.getMyRelease();
      Assert.assertNotNull(releaseMetadata);
    }
    
    /**
     * Test for getLatestRelease method.
     */
    @Test public void testGetLatestRelease() {
        Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
            .apiKey(TEST_PROJECT_API_KEY)
            .projectId(UUID.fromString(TEST_PROJECT_UUID))
            .branch("master")
            .baseUrl("https://test.relizahub.com")
            .build();
        Library library = new Library(flags);
        ReleaseMetadata releaseMetadata = library.getLatestRelease();
        Assert.assertNotNull(releaseMetadata);
    }
    
    /**
     * Test for approveRelease method.
     */
    @Test public void testApproveRelease() {
        Flags approveReleaseFlags = Flags.builder().apiKeyId(TEST_APPROVAL_API_ID)
            .apiKey(TEST_APPROVAL_API_KEY)
            .version("0.0.1")
            .projectId(UUID.fromString(TEST_PROJECT_UUID))
            .approvalType("PM")
            .baseUrl("https://test.relizahub.com")
            .build();
        Library approveReleaseLibrary = new Library(approveReleaseFlags);
        ReleaseMetadata releaseMetadata = approveReleaseLibrary.approveRelease();
        Assert.assertNotNull(releaseMetadata);
    }
}