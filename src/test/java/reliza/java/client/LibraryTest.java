/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reliza.java.client;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Test;

import reliza.java.client.responses.FullRelease;
import reliza.java.client.responses.ProjectVersion;
import reliza.java.client.responses.ReleaseData;

/**
 * Class for testing Library.java methods.
 */
public class LibraryTest {
	private final String BASE_URL = "https://test.relizahub.com";
	private final String TEST_PROJECT_UUID = "6d0418e2-ab77-4de4-b616-c4c817e9b716";
	private final String TEST_PROJECT_API_ID = "PROJECT__6d0418e2-ab77-4de4-b616-c4c817e9b716";
	private final String TEST_PROJECT_API_KEY = "5d5ad1359d7926cd6971c809fbbf3c2c8e690c7298cfc451487845c15b602243467a43392481337a721faf86627c385a";
	private final String TEST_ORG_API_ID = "ORGANIZATION_RW__1a8edd8d-7947-4cd3-b3f2-a00b0811016a__ord__546433e9-25e6-4b72-8b66-5a9a0c77e8f1";
	private final String TEST_ORG_API_KEY= "4dec76711ea263ee11b89619832b873844f148586755210edf187e84b708a207c0cbd2b60c90816f38625ce6d09f4788";
	private final String TEST_INSTANCE_API_ID = "INSTANCE__d94f5905-a08b-4795-a5b9-277ed0108df8";
	private final String TEST_INSTANCE_API_KEY = "01c79e7e29aaf5373b8e8baff4512eea401dab9764510e5ee7d976d908e5e0b54397651098a7716eac8d734093b44129";
	private final String TEST_APPROVAL_API_ID = "APPROVAL__a5481785-b47e-4f58-be04-e9bc9521f67e";
	private final String TEST_APPROVAL_API_KEY = "1d86e2dc6c29a560bd9a6b20b338138d5faa8578069f7aa0724f68d18ea059c7657a14f78d53f18298564a16c8cd686b";
	
	/**
	 * Test for getVersion using org wide api key and id
	 */
	@Test public void testGetVersion() {
		Flags flags = Flags.builder().apiKeyId(TEST_ORG_API_ID)
			.apiKey(TEST_ORG_API_KEY)
			.branch("master")
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		ProjectVersion projectVersion = library.getVersion();
		Assert.assertNotNull(projectVersion);
	}
	
	/**
	 * Test for setting a new release and pushing project details.
	 */
	@Test public void testAddRelease() {
		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
			.apiKey(TEST_PROJECT_API_KEY)
			.branch("master")
			.commitHash("b92b48da3772f24f7862ef38d56f789e421af587")
			.artCiMeta(Arrays.asList("Github Actions", "Github Actions"))
			.artGroup(Arrays.asList("io.reliza", "io.reliza"))
			.artId(Arrays.asList("relizaio/reliza-cli", "relizaio/reliza-cli"))
			.artPackage(Arrays.asList("DOCKER", "DOCKER"))
			.artPublisher(Arrays.asList("Rasa", "Rasa"))
			.artType(Arrays.asList("Docker", "Docker"))
			.dateActual("2021-01-11T19:43:32.286086002Z")
			.dateEnd(Arrays.asList("2021-01-12T19:43:32.286086002Z", "2021-01-12T19:43:32.286086002Z"))
			.dateStart(Arrays.asList("2021-01-11T19:43:32.286086002Z", "2021-01-11T19:43:32.286086002Z"))
			.artDigests(Arrays.asList("sha256:16e14", "sha256:13e05"))
			.endPoint("https://github.com/relizaio/reliza-java-client")
			.status("complete")
			.tagKeys(Arrays.asList("prod", "prod"))
			.tagVals(Arrays.asList("true", "true"))
			.vcsType("git")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		ProjectVersion projectVersion = library.getVersion();
		Assert.assertNotNull(projectVersion);
		library.flags.setVersion(projectVersion.getVersion());
		ReleaseData releaseData = library.addRelease();
		Assert.assertNotNull(releaseData);
	}
	
	/**
	 * Test for setting PR data.
	 */
	@Test public void testSetPrData() {
		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
			.apiKey(TEST_PROJECT_API_KEY)
			.branch("f4")
			.targetBranch("master")
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.state("OPEN")
			.endPoint("OPEN")
			.title("title")
			.number("2")
			.createdDate("2021-01-11T19:43:32.286086002Z")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		
		Optional<Boolean> result = library.prData();
		Assert.assertNotNull(result.get());
	}
	
	/**
	 * Test for checkHash method.
	 */
//	@Test public void testCheckHash() {
//		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
//			.apiKey(TEST_PROJECT_API_KEY)
//			.hash("sha256:123")
//			.baseUrl(BASE_URL)
//			.build();
//		Library library = new Library(flags);
//		ReleaseData releaseData = library.checkHash();
//		Assert.assertNotNull(releaseData);
//	}
	
	/**
	 * Test for instData method with an image sha256.
	 */
	@Test public void testInstDataImagesString() {
		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
			.apiKey(TEST_INSTANCE_API_KEY)
			.imagesString("sha256:tests")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		Map<String, String> status = library.instData();
		Assert.assertNotNull(status);
	}
	
	/**
	 * Test for instData method using file path.
	 */
	@Test public void testInstDataImageStream() {
		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
			.apiKey(TEST_INSTANCE_API_KEY)
			.imageInputStream(IOUtils.toInputStream("this is my input stream", StandardCharsets.UTF_8))
			.namespace("spacename")
			.senderId("Idsender")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		Map<String, String> status = library.instData();
		Assert.assertNotNull(status);
	}
	
	/**
	 * Test for getMyRelease method.
	 */
//	@Test public void testGetMyRelease() {
//		Flags flags = Flags.builder().apiKeyId(TEST_INSTANCE_API_ID)
//			.apiKey(TEST_INSTANCE_API_KEY)
//			.baseUrl(BASE_URL)
//			.build();
//		Library library = new Library(flags);
//		List<FullRelease> fullReleases = library.getMyRelease();
//		Assert.assertFalse(fullReleases.isEmpty());
//	}
//	
	/**
	 * Test for getLatestRelease method.
	 */
	@Test public void testGetLatestRelease() {
		Flags flags = Flags.builder().apiKeyId(TEST_PROJECT_API_ID)
			.apiKey(TEST_PROJECT_API_KEY)
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.branch("master")
			.baseUrl(BASE_URL)
			.build();
		Library library = new Library(flags);
		FullRelease fullRelease = library.getLatestRelease();
		Assert.assertNotNull(fullRelease);
	}
	
	/**
	 * Test for approveRelease method.
	 */
	@Test public void testApproveRelease() {
		Flags approveReleaseFlags = Flags.builder().apiKeyId(TEST_APPROVAL_API_ID)
			.apiKey(TEST_APPROVAL_API_KEY)
			.version("0.0.0")
			.projectId(UUID.fromString(TEST_PROJECT_UUID))
			.approvalType("PM")
			.baseUrl(BASE_URL)
			.build();
		Library approveReleaseLibrary = new Library(approveReleaseFlags);
		ReleaseData releaseData = approveReleaseLibrary.approveRelease();
		Assert.assertNotNull(releaseData);
	}
}